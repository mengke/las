/*
 * Copyright 2013 Ke Meng (mengke@icloud.com)
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 */

apply from: "./dependencies.gradle"

configure(allprojects) { project ->
    group = "org.easycloud.las"
    version = "1.0-SNAPSHOT"

    apply plugin: "java"

    compileJava {
        sourceCompatibility=1.6
        targetCompatibility=1.6
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = [
            "-Xlint:serial",
            "-Xlint:varargs",
            "-Xlint:cast",
            "-Xlint:classfile",
            "-Xlint:dep-ann",
            "-Xlint:divzero",
            "-Xlint:empty",
            "-Xlint:finally",
            "-Xlint:overrides",
            "-Xlint:path",
            "-Xlint:processing",
            "-Xlint:static",
            "-Xlint:try",
            "-Xlint:-options",     // intentionally disabled
            "-Xlint:-fallthrough", // intentionally disabled
            "-Xlint:-rawtypes",    // TODO enable and fix warnings
            "-Xlint:-deprecation"  // TODO enable and fix warnings
    ]

    sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

    repositories {
        maven {
            url "http://172.16.17.1:8081/artifactory/repo"
        }
    }

    dependencies {
        compile(libraries.slf4j_api)
        compile(libraries.slf4j_log4j12)
        compile(libraries.log4j)
        testCompile(libraries.testng)
    }
}

configure(subprojects) { subproject ->

    jar {
        manifest.attributes["Created-By"] =
            "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = subproject.name
        manifest.attributes["Implementation-Version"] = subproject.version
    }
}

project ("las-core") {
    description = "Las Core"

    dependencies {
        compile(libraries.commons_lang3)
        compile(libraries.commons_io)
        compile(libraries.spring_core)
        compile(libraries.jdom2)
    }
}

project ("las-agent") {
    description = "Las Agent"

    dependencies {
        compile(project(":las-core"))
        compile(libraries.flume_core)
    }

    jar {
        from sourceSets.main.resources
        exclude('log4j.dtd')
        exclude('log4j.xml')
        exclude('*.properties')
    }

    task distZip (type: Zip, dependsOn: jar) {
        group = "Distribution"
        def baseDir = project.name + "-" + project.version
        def artifacts = new HashSet()
        project.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            artifacts << artifact.file
        }

        into ("${baseDir}/lib") {
            from (artifacts)
            from (project.libsDir)
        }

        into ("${baseDir}/conf") {
            from (sourceSets.main.output.resourcesDir)
        }

        into ("${baseDir}/bin") {
            from ("src/bin/agent")
        }
    }

    artifacts {
        archives distZip
    }
}

project ("las-analyzer") {
    description = "Las Analyzer"

    dependencies {
        compile(libraries.hadoop_client)
        compile(libraries.mongodb_driver)
        testCompile(libraries.mrunit)
    }

    artifacts {
        archives jar
    }
}

project ("las-server") {
    description = "Las Server"

    dependencies {
        compile(project(":las-core"))
        compile(libraries.nifty_core)
        compile(libraries.libthrift)
        compile(libraries.spring_context)
        compile(libraries.spring_data_mongodb)
    }

    jar {
        from sourceSets.main.resources
        exclude('log4j.dtd')
        exclude('log4j.xml')
        exclude('*.properties')
        exclude('**/spring/')
    }

    task distZip (type: Zip, dependsOn: [jar, ":las-api:jar"]) {
        group = "Distribution"
        def baseDir = project.name + "-" + project.version
        def artifacts = new HashSet()
        project.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            artifacts << artifact.file
        }

        project(":las-api").configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            artifacts << artifact.file
        }

        into ("${baseDir}/lib") {
            from (artifacts)
            from (project.libsDir)
            from (project(":las-api").libsDir)
        }

        into ("${baseDir}/conf") {
            from (sourceSets.main.output.resourcesDir)
            from (project(":las-api").sourceSets.main.output.resourcesDir)
        }

        into ("${baseDir}/bin") {
            from ("src/bin/server")
        }
    }

    artifacts {
        archives distZip
    }
}

project ("las-api") {
    description = "Las API Services"

    jar {
        from sourceSets.main.resources
        exclude('log4j.dtd')
        exclude('log4j.xml')
        exclude('*.properties')
        exclude('**/spring/')
    }

    dependencies {
        compile(project(":las-server"))
        testCompile(libraries.spring_test)
    }
}

configure (rootProject) {
    description = "Log Analyzing System"

    apply plugin: 'eclipse'
    apply plugin: 'idea'

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    task wrapper(type: Wrapper) {
        description = "Generates gradlew[.bat] scripts"
        gradleVersion = "1.6"
    }

    task distZip(type: Zip, dependsOn: [":las-agent:distZip", ":las-server:distZip", ":las-analyzer:jar"]) {
        group = "Distribution"
        baseName = "las"
        classifier = "dist"

        ext.baseDir = baseName + "-" + classifier;

        into ("${baseDir}") {
            from("COPYRIGHT")
            from("LICENSE")
            from("README.md")
            from(project(":las-agent").distsDir)
            from(project(":las-server").distsDir)
            from(project(":las-analyzer").libsDir)
        }

        into ("${baseDir}/las-ui") {
            from("las-ui")
        }
    }

    artifacts {
        archives distZip
    }
}

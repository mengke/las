/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.easycloud.las.services.housevisit.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;

@Document
public class UvsRecord implements org.apache.thrift.TBase<UvsRecord, UvsRecord._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UvsRecord");

  private static final org.apache.thrift.protocol.TField USER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("userCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField HV_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("hvRecords", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UvsRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UvsRecordTupleSchemeFactory());
  }

    @Id
  public String userCode; // required
  public byte userType; // optional
    @DBRef
    @Field("houseVisits")
  public List<HvRecord> hvRecords; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_CODE((short)1, "userCode"),
    USER_TYPE((short)2, "userType"),
    HV_RECORDS((short)3, "hvRecords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_CODE
          return USER_CODE;
        case 2: // USER_TYPE
          return USER_TYPE;
        case 3: // HV_RECORDS
          return HV_RECORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER_TYPE,_Fields.HV_RECORDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_CODE, new org.apache.thrift.meta_data.FieldMetaData("userCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HV_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("hvRecords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HvRecord.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UvsRecord.class, metaDataMap);
  }

  public UvsRecord() {
  }

  public UvsRecord(
    String userCode)
  {
    this();
    this.userCode = userCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UvsRecord(UvsRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserCode()) {
      this.userCode = other.userCode;
    }
    this.userType = other.userType;
    if (other.isSetHvRecords()) {
      List<HvRecord> __this__hvRecords = new ArrayList<HvRecord>();
      for (HvRecord other_element : other.hvRecords) {
        __this__hvRecords.add(new HvRecord(other_element));
      }
      this.hvRecords = __this__hvRecords;
    }
  }

  public UvsRecord deepCopy() {
    return new UvsRecord(this);
  }

  @Override
  public void clear() {
    this.userCode = null;
    setUserTypeIsSet(false);
    this.userType = 0;
    this.hvRecords = null;
  }

  public String getUserCode() {
    return this.userCode;
  }

  public UvsRecord setUserCode(String userCode) {
    this.userCode = userCode;
    return this;
  }

  public void unsetUserCode() {
    this.userCode = null;
  }

  /** Returns true if field userCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCode() {
    return this.userCode != null;
  }

  public void setUserCodeIsSet(boolean value) {
    if (!value) {
      this.userCode = null;
    }
  }

  public byte getUserType() {
    return this.userType;
  }

  public UvsRecord setUserType(byte userType) {
    this.userType = userType;
    setUserTypeIsSet(true);
    return this;
  }

  public void unsetUserType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  public void setUserTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
  }

  public int getHvRecordsSize() {
    return (this.hvRecords == null) ? 0 : this.hvRecords.size();
  }

  public java.util.Iterator<HvRecord> getHvRecordsIterator() {
    return (this.hvRecords == null) ? null : this.hvRecords.iterator();
  }

  public void addToHvRecords(HvRecord elem) {
    if (this.hvRecords == null) {
      this.hvRecords = new ArrayList<HvRecord>();
    }
    this.hvRecords.add(elem);
  }

  public List<HvRecord> getHvRecords() {
    return this.hvRecords;
  }

  public UvsRecord setHvRecords(List<HvRecord> hvRecords) {
    this.hvRecords = hvRecords;
    return this;
  }

  public void unsetHvRecords() {
    this.hvRecords = null;
  }

  /** Returns true if field hvRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetHvRecords() {
    return this.hvRecords != null;
  }

  public void setHvRecordsIsSet(boolean value) {
    if (!value) {
      this.hvRecords = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_CODE:
      if (value == null) {
        unsetUserCode();
      } else {
        setUserCode((String)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((Byte)value);
      }
      break;

    case HV_RECORDS:
      if (value == null) {
        unsetHvRecords();
      } else {
        setHvRecords((List<HvRecord>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_CODE:
      return getUserCode();

    case USER_TYPE:
      return Byte.valueOf(getUserType());

    case HV_RECORDS:
      return getHvRecords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_CODE:
      return isSetUserCode();
    case USER_TYPE:
      return isSetUserType();
    case HV_RECORDS:
      return isSetHvRecords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UvsRecord)
      return this.equals((UvsRecord)that);
    return false;
  }

  public boolean equals(UvsRecord that) {
    if (that == null)
      return false;

    boolean this_present_userCode = true && this.isSetUserCode();
    boolean that_present_userCode = true && that.isSetUserCode();
    if (this_present_userCode || that_present_userCode) {
      if (!(this_present_userCode && that_present_userCode))
        return false;
      if (!this.userCode.equals(that.userCode))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (this.userType != that.userType)
        return false;
    }

    boolean this_present_hvRecords = true && this.isSetHvRecords();
    boolean that_present_hvRecords = true && that.isSetHvRecords();
    if (this_present_hvRecords || that_present_hvRecords) {
      if (!(this_present_hvRecords && that_present_hvRecords))
        return false;
      if (!this.hvRecords.equals(that.hvRecords))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UvsRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UvsRecord typedOther = (UvsRecord)other;

    lastComparison = Boolean.valueOf(isSetUserCode()).compareTo(typedOther.isSetUserCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCode, typedOther.userCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(typedOther.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, typedOther.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHvRecords()).compareTo(typedOther.isSetHvRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHvRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hvRecords, typedOther.hvRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UvsRecord(");
    boolean first = true;

    sb.append("userCode:");
    if (this.userCode == null) {
      sb.append("null");
    } else {
      sb.append(this.userCode);
    }
    first = false;
    if (isSetUserType()) {
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
    }
    if (isSetHvRecords()) {
      if (!first) sb.append(", ");
      sb.append("hvRecords:");
      if (this.hvRecords == null) {
        sb.append("null");
      } else {
        sb.append(this.hvRecords);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (userCode == null) {
      throw new TProtocolException("Required field 'userCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UvsRecordStandardSchemeFactory implements SchemeFactory {
    public UvsRecordStandardScheme getScheme() {
      return new UvsRecordStandardScheme();
    }
  }

  private static class UvsRecordStandardScheme extends StandardScheme<UvsRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UvsRecord struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userCode = iprot.readString();
              struct.setUserCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.userType = iprot.readByte();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HV_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.hvRecords = new ArrayList<HvRecord>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  HvRecord _elem2; // required
                  _elem2 = new HvRecord();
                  _elem2.read(iprot);
                  struct.hvRecords.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setHvRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UvsRecord struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userCode != null) {
        oprot.writeFieldBegin(USER_CODE_FIELD_DESC);
        oprot.writeString(struct.userCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserType()) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeByte(struct.userType);
        oprot.writeFieldEnd();
      }
      if (struct.hvRecords != null) {
        if (struct.isSetHvRecords()) {
          oprot.writeFieldBegin(HV_RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hvRecords.size()));
            for (HvRecord _iter3 : struct.hvRecords)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UvsRecordTupleSchemeFactory implements SchemeFactory {
    public UvsRecordTupleScheme getScheme() {
      return new UvsRecordTupleScheme();
    }
  }

  private static class UvsRecordTupleScheme extends TupleScheme<UvsRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UvsRecord struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.userCode);
      BitSet optionals = new BitSet();
      if (struct.isSetUserType()) {
        optionals.set(0);
      }
      if (struct.isSetHvRecords()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUserType()) {
        oprot.writeByte(struct.userType);
      }
      if (struct.isSetHvRecords()) {
        {
          oprot.writeI32(struct.hvRecords.size());
          for (HvRecord _iter4 : struct.hvRecords)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UvsRecord struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userCode = iprot.readString();
      struct.setUserCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.userType = iprot.readByte();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hvRecords = new ArrayList<HvRecord>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            HvRecord _elem7; // required
            _elem7 = new HvRecord();
            _elem7.read(iprot);
            struct.hvRecords.add(_elem7);
          }
        }
        struct.setHvRecordsIsSet(true);
      }
    }
  }

}


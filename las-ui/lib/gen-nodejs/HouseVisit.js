//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./housevisit_types');
//HELPER FUNCTIONS AND STRUCTURES

HouseVisit_getUserVisitRecords_args = function(args) {
  this.start = null;
  this.limit = null;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
  }
};
HouseVisit_getUserVisitRecords_args.prototype = {};
HouseVisit_getUserVisitRecords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HouseVisit_getUserVisitRecords_args.prototype.write = function(output) {
  output.writeStructBegin('HouseVisit_getUserVisitRecords_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 1);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HouseVisit_getUserVisitRecords_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
HouseVisit_getUserVisitRecords_result.prototype = {};
HouseVisit_getUserVisitRecords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.UvsRecord();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HouseVisit_getUserVisitRecords_result.prototype.write = function(output) {
  output.writeStructBegin('HouseVisit_getUserVisitRecords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HouseVisit_getUserVisitRecord_args = function(args) {
  this.userCode = null;
  this.houseType = null;
  if (args) {
    if (args.userCode !== undefined) {
      this.userCode = args.userCode;
    }
    if (args.houseType !== undefined) {
      this.houseType = args.houseType;
    }
  }
};
HouseVisit_getUserVisitRecord_args.prototype = {};
HouseVisit_getUserVisitRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.houseType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HouseVisit_getUserVisitRecord_args.prototype.write = function(output) {
  output.writeStructBegin('HouseVisit_getUserVisitRecord_args');
  if (this.userCode !== null && this.userCode !== undefined) {
    output.writeFieldBegin('userCode', Thrift.Type.STRING, 1);
    output.writeString(this.userCode);
    output.writeFieldEnd();
  }
  if (this.houseType !== null && this.houseType !== undefined) {
    output.writeFieldBegin('houseType', Thrift.Type.BYTE, 2);
    output.writeByte(this.houseType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HouseVisit_getUserVisitRecord_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
HouseVisit_getUserVisitRecord_result.prototype = {};
HouseVisit_getUserVisitRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.HvRecord();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HouseVisit_getUserVisitRecord_result.prototype.write = function(output) {
  output.writeStructBegin('HouseVisit_getUserVisitRecord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HouseVisitClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
HouseVisitClient.prototype = {};
HouseVisitClient.prototype.getUserVisitRecords = function(start, limit, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserVisitRecords(start, limit);
};

HouseVisitClient.prototype.send_getUserVisitRecords = function(start, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserVisitRecords', Thrift.MessageType.CALL, this.seqid);
  var args = new HouseVisit_getUserVisitRecords_args();
  args.start = start;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HouseVisitClient.prototype.recv_getUserVisitRecords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HouseVisit_getUserVisitRecords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserVisitRecords failed: unknown result');
};
HouseVisitClient.prototype.getUserVisitRecord = function(userCode, houseType, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserVisitRecord(userCode, houseType);
};

HouseVisitClient.prototype.send_getUserVisitRecord = function(userCode, houseType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserVisitRecord', Thrift.MessageType.CALL, this.seqid);
  var args = new HouseVisit_getUserVisitRecord_args();
  args.userCode = userCode;
  args.houseType = houseType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HouseVisitClient.prototype.recv_getUserVisitRecord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HouseVisit_getUserVisitRecord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserVisitRecord failed: unknown result');
};
HouseVisitProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
HouseVisitProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

HouseVisitProcessor.prototype.process_getUserVisitRecords = function(seqid, input, output) {
  var args = new HouseVisit_getUserVisitRecords_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getUserVisitRecords(args.start, args.limit, function (err, result) {
    var result = new HouseVisit_getUserVisitRecords_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getUserVisitRecords", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HouseVisitProcessor.prototype.process_getUserVisitRecord = function(seqid, input, output) {
  var args = new HouseVisit_getUserVisitRecord_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getUserVisitRecord(args.userCode, args.houseType, function (err, result) {
    var result = new HouseVisit_getUserVisitRecord_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getUserVisitRecord", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

